#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Python version: 3.6


import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
import copy
import time
import numpy as np
from tqdm import tqdm
import matplotlib.pyplot as plt

import torch
from torch.utils.tensorboard import SummaryWriter

from src.options import args_parser
from src.update import LocalUpdate, test_inference
from src.models import MLP, CNNMnist, CNNCifar
from src.utils import get_dataset, aggregate_params, exp_details
from src.blockchain import get_weights_from_ground_chain, get_weights_from_top_chain
from src.ADMM import get_d_matrix

if __name__ == '__main__':
    start_time = time.time()

    # define paths
    path_project = os.path.abspath('..')
    logger = SummaryWriter('../logs')

    args = args_parser()
    exp_details(args)

    device = torch.device('cuda:{}'.format(args.gpu)) if args.gpu is not None else torch.device('cpu')

    # TODO: use results generated by game theory - done
    np.random.seed(args.seed)
    d_matrix = get_d_matrix(N=args.num_fv, M=args.num_fr, rho=1, scale=5)
    #d_matrix = np.random.uniform(low=0, high=40, size=(args.num_fv, args.num_fr))
    print('d_matrix:')
    print(d_matrix)
    D_fr = 20
    # load dataset and user groups
    train_dataset, test_dataset, fv_groups, fr_groups = get_dataset(args, d_matrix, D_fr)

    # BUILD MODEL
    if args.model == 'cnn':
        # Convolutional neural netork
        if args.dataset == 'mnist':
            global_model = CNNMnist(args=args)
        elif args.dataset == 'cifar':
            global_model = CNNCifar(args=args)

    elif args.model == 'mlp':
        # Multi-layer preceptron
        img_size = train_dataset[0][0].shape
        len_in = 1
        for x in img_size:
            len_in *= x
            global_model = MLP(dim_in=len_in, dim_hidden=64,
                               dim_out=args.num_classes)
    else:
        exit('Error: unrecognized model')

    # Set the model to train and send it to device.
    global_model.to(device)
    global_model.train()
    print(global_model)

    # copy weights
    global_params = global_model.state_dict()

    # Training
    train_loss, train_accuracy = [], []
    print_every = 2
    val_loss_pre, counter = 0, 0

    for epoch in tqdm(range(args.epochs)):
        fv_local_params_list = [[] for _ in range(args.num_fv)]  # N*M FV local model params
        fr_local_params_list, fr_local_losses_list = [], []  # M FR local model params
        print(f'\n | Global Training Round : {epoch+1} |\n')

        global_model.train()
        idxs_fv = np.arange(args.num_fv)
        idxs_fr = np.arange(args.num_fr)

        # FV update model
        for fv_idx in idxs_fv:
            for fr_idx in idxs_fr:
                client_name = 'FV {} for FR {}'.format(fv_idx + 1, fr_idx + 1)
                local_model = LocalUpdate(args=args, dataset=train_dataset,
                                          idxs=fv_groups[fv_idx][fr_idx], logger=logger, client_name=client_name)
                w, loss = local_model.update_weights(
                    model=copy.deepcopy(global_model), global_round=epoch)
                fv_local_params_list[fv_idx].append(copy.deepcopy(w))

        for fr_idx in idxs_fr:
            # collect weights from ground chain
            # TODO: add block chain code in this function
            ground_weights_fv = get_weights_from_ground_chain(args, fr_idx)

            # aggregate FV params
            fv_local_params_list_for_single_fr = [fv_local_params_list[i][fr_idx] for i in idxs_fv]
            fr_params = aggregate_params(fv_local_params_list_for_single_fr, ground_weights_fv)
            fr_local_params_list.append(fr_params)

        fr_model = copy.deepcopy(global_model)
        # FR update model
        for fr_idx in idxs_fr:
            client_name = 'FR {}'.format(fr_idx + 1)
            fr_model.load_state_dict(fr_local_params_list[fr_idx])
            local_model = LocalUpdate(args=args, dataset=train_dataset,
                                      idxs=fr_groups[fr_idx], logger=logger, client_name=client_name)
            w, loss = local_model.update_weights(
                model=copy.deepcopy(fr_model), global_round=epoch)
            # update FR params
            fr_local_params_list[fr_idx] = copy.deepcopy(w)
            fr_local_losses_list.append(copy.deepcopy(loss))

        # collect weights from top chain
        # TODO: add block chain code in this function
        top_weights_fr = get_weights_from_top_chain(args, d_matrix, D_fr)
        # aggregate FR params
        global_params = aggregate_params(fr_local_params_list, top_weights_fr)

        # update global prams
        global_model.load_state_dict(global_params)

        loss_avg = sum(fr_local_losses_list) / len(fr_local_losses_list)
        train_loss.append(loss_avg)

        # Calculate avg training accuracy over all FRs at every epoch
        list_acc, list_loss = [], []
        global_model.eval()
        for fr_idx in range(args.num_fr):
            client_name = 'FR {}'.format(fr_idx + 1)
            local_model = LocalUpdate(args=args, dataset=train_dataset,
                                      idxs=fr_groups[fr_idx], logger=logger, client_name=client_name)
            acc, loss = local_model.inference(model=global_model)
            list_acc.append(acc)
            list_loss.append(loss)
        train_accuracy.append(sum(list_acc)/len(list_acc))

        # print global training loss after every 'i' rounds
        if (epoch+1) % print_every == 0:
            print(f' \nAvg Training Stats after {epoch+1} global rounds:')
            print(f'Training Loss : {np.mean(np.array(train_loss))}')
            print('Train Accuracy: {:.2f}% \n'.format(100*train_accuracy[-1]))

    # Test inference after completion of training
    test_acc, test_loss = test_inference(args, global_model, test_dataset)

    print(f' \n Results after {args.epochs} global rounds of training:')
    print("|---- Avg Train Accuracy: {:.2f}%".format(100*train_accuracy[-1]))
    print("|---- Test Accuracy: {:.2f}%".format(100*test_acc))

    # Saving the objects train_loss and train_accuracy:
    file_name = 'save/objects/{}_{}_{}_FV[{}]_FR[{}]_E[{}]_B[{}].pkl'.\
        format(args.dataset, args.model, args.epochs, args.num_fv, args.num_fr,
               args.local_ep, args.local_bs)

    print('\n Total Run Time: {0:0.4f}'.format(time.time()-start_time))

    # PLOTTING (optional)
    # Plot Loss curve
    plt.figure()
    plt.title('Training Loss vs Communication rounds')
    plt.plot(range(len(train_loss)), train_loss, color='r')
    plt.ylabel('Training loss')
    plt.xlabel('Communication Rounds')
    plt.savefig('save/fed_{}_{}_{}_E[{}]_B[{}]_seed[{}]_loss.png'.
                format(args.dataset, args.model, args.epochs,
                       args.local_ep, args.local_bs, args.seed))
    print('Saving loss curve!')

    # Plot Average Accuracy vs Communication rounds
    plt.figure()
    plt.title('Average Accuracy vs Communication rounds')
    plt.plot(range(len(train_accuracy)), train_accuracy, color='k')
    plt.ylabel('Average Accuracy')
    plt.xlabel('Communication Rounds')
    plt.savefig('save/fed_{}_{}_{}_E[{}]_B[{}]_seed[{}]_acc.png'.
                format(args.dataset, args.model, args.epochs,
                       args.local_ep, args.local_bs, args.seed))
    print('Saving accuracy curve!')
